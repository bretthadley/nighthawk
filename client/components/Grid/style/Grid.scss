@import "../../../assets/styles/base";

$responsive:            true!default;

/**
 * Is this build mobile first? Setting to â€˜trueâ€™ means that all grids will be
 * 100% width if you do not apply a more specific class to them.
 */
$mobile-first:          true!default;

/**
 * Set the spacing between your grid items.
 */
$gutters: (
    '0': 0,
    '8': 8px,
    '12': 12px,
    '16': 16px,
    '24': 24px,
    '32': 32px,
)!default;

$allowed-gutter-namespaces: ('0', '8', '12', '16', '24', '32')!default;

/**
 * Would you like Sassâ€™ silent classes, or regular CSS classes?
 */
$use-silent-classes:    false!default;

/**
 * Would you like push and pull classes enabled?
 */
$push:                  true!default;
$pull:                  true!default;

/**
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.sm--one-half`), the second value is the media query
 * that the breakpoint fires at.
 */
$breakpoints: (
    'xxs' 'screen and (max-width: 480px)',
    'xs' 'screen and (min-width: 600px)',
    'sm' 'screen and (min-width: 840px)',
    'md' 'screen and (min-width: 960px)',
    'lg' 'screen and (min-width: 1280px)',
    'xlg' 'screen and (min-width: 1440px)',
    'xxlg' 'screen and (min-width: 1920px)',
)!default;

/**
 * Define which namespaced breakpoints you would like to generate for each of
 * widths, push and pull. This is handy if you only need pull on, say, desk, or
 * you only need a new width breakpoint at mobile sizes. It allows you to only
 * compile as much CSS as you need. All are turned on by default, but you can
 * add and remove breakpoints at will.
 *
 * Push and pull shall only be used if `$push` and/or `$pull` and `$responsive`
 * have been set to `true`.
 */
$breakpoint-has-widths: ('xxs', 'xs', 'sm', 'md', 'lg', 'xlg', 'xxlg')!default;
$breakpoint-has-push:   ('xxs', 'xs', 'sm', 'md', 'lg', 'xlg', 'xxlg')!default;
$breakpoint-has-pull:   ('xxs', 'xs', 'sm', 'md', 'lg', 'xlg', 'xxlg')!default;

$class-type:            unquote(".");

@if $use-silent-classes == true{
    $class-type:        unquote("%");
}


/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * These mixins are for the library to use only, you should not need to modify
 * them at all.
 * Enclose a block of code with a media query as named in `$breakpoints`.
 *
 * Drop relative positioning into silent classes which canâ€™t take advantage of
 * the `[class*="push--"]` and `[class*="pull--"]` selectors.
 */
@mixin silent-relative(){
    @if $use-silent-classes == true{
        position:relative;
    }
}


/*------------------------------------*\
    $GRID SETUP
\*------------------------------------*/

#{$class-type}grid-container {
    max-width: 1680px;
    margin: 0 auto 0;
}

#{$class-type}grid-container--hero {
    max-width: 2000px;
}

/**
 * 1. Allow the grid system to be used on lists.
 * 2. Remove any margins and paddings that might affect the grid system.
 * 3. Apply a negative `margin-left` to negate the columnsâ€™ gutters.
 */
#{$class-type}grid{
    list-style:none;                /* [1] */
    margin:0;                       /* [2] */
    padding:0;                      /* [2] */
    margin-left: -(get-gutter());           /* [3] */
}

/**
 * 1. Cause columns to stack side-by-side.
 * 2. Space columns apart.
 * 3. Align columns to the tops of each other.
 * 4. Full-width unless told to behave otherwise.
 * 5. Required to combine fluid widths and fixed gutters.
 */
#{$class-type}grid__item{
    display:inline-block;           /* [1] */
    padding-left: get-gutter();           /* [2] */
    vertical-align:top;             /* [3] */
    @if $mobile-first == true{
        width:100%;                 /* [4] */
    }
    -webkit-box-sizing:border-box;  /* [5] */
    -moz-box-sizing:border-box;  /* [5] */
    box-sizing:border-box;  /* [5] */
}


/**
 * Reversed grids allow you to structure your source in the opposite order to
 * how your rendered layout will appear. Extends `.grid`.
 */
#{$class-type}grid--rev{
    direction:rtl;
    text-align:left;

    > #{$class-type}grid__item{
        direction:ltr;
        text-align:left;
    }
}

/**
 * Align the entire grid to the right. Extends `.grid`.
 */
#{$class-type}grid--right{
    text-align:right;

    > #{$class-type}grid__item{
        text-align:left;
    }
}


/**
 * Centered grids align grid items centrally without needing to use push or pull
 * classes. Extends `.grid`.
 */
#{$class-type}grid--center{
    text-align:center;

    > #{$class-type}grid__item{
        text-align:left;
    }
}


/**
 * Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends
 * `.grid`.
 */
#{$class-type}grid--middle{

    > #{$class-type}grid__item{
        vertical-align:middle;
    }
}

#{$class-type}grid--bottom{

    > #{$class-type}grid__item{
        vertical-align:bottom;
    }
}

@mixin spacing-type($namespace:"", $gutter-namespace: '16') {
    #{$class-type}#{$namespace}grid--spacing--#{$gutter-namespace} {
        margin-left: -(get-gutter($gutter-namespace));

        > #{$class-type}grid__item {
            padding-left: get-gutter($gutter-namespace);
        }

        > #{$class-type}grid-container {
            padding: 0 get-gutter($gutter-namespace);

            > #{$class-type}grid__item {
                padding-left: get-gutter($gutter-namespace);
            }
        }
    }
}

/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Create our width classes, prefixed by the specified namespace.
 */
@mixin device-type($namespace:""){

    /**
     * Whole
     */
    #{$class-type}#{$namespace}one-whole         { width:100%; }


    /**
     * Halves
     */
    #{$class-type}#{$namespace}one-half          { width:50%; }


    /**
     * Thirds
     */
    #{$class-type}#{$namespace}one-third         { width:33.333%; }
    #{$class-type}#{$namespace}two-thirds        { width:66.666%; }


    /**
     * Quarters
     */
    #{$class-type}#{$namespace}one-quarter       { width:25%; }
    #{$class-type}#{$namespace}two-quarters      { @extend #{$class-type}#{$namespace}one-half; }
    #{$class-type}#{$namespace}three-quarters    { width:75%; }


    /**
     * Fifths
     */
    #{$class-type}#{$namespace}one-fifth         { width:20%; }
    #{$class-type}#{$namespace}two-fifths        { width:40%; }
    #{$class-type}#{$namespace}three-fifths      { width:60%; }
    #{$class-type}#{$namespace}four-fifths       { width:80%; }


    /**
     * Sixths
     */
    #{$class-type}#{$namespace}one-sixth         { width:16.666%; }
    #{$class-type}#{$namespace}two-sixths        { @extend #{$class-type}#{$namespace}one-third; }
    #{$class-type}#{$namespace}three-sixths      { @extend #{$class-type}#{$namespace}one-half; }
    #{$class-type}#{$namespace}four-sixths       { @extend #{$class-type}#{$namespace}two-thirds; }
    #{$class-type}#{$namespace}five-sixths       { width:83.333%; }


    /**
     * Eighths
     */
    #{$class-type}#{$namespace}one-eighth        { width:12.5%; }
    #{$class-type}#{$namespace}two-eighths       { @extend #{$class-type}#{$namespace}one-quarter; }
    #{$class-type}#{$namespace}three-eighths     { width:37.5%; }
    #{$class-type}#{$namespace}four-eighths      { @extend #{$class-type}#{$namespace}one-half; }
    #{$class-type}#{$namespace}five-eighths      { width:62.5%; }
    #{$class-type}#{$namespace}six-eighths       { @extend #{$class-type}#{$namespace}three-quarters; }
    #{$class-type}#{$namespace}seven-eighths     { width:87.5%; }


    /**
     * Tenths
     */
    #{$class-type}#{$namespace}one-tenth         { width:10%; }
    #{$class-type}#{$namespace}two-tenths        { @extend #{$class-type}#{$namespace}one-fifth; }
    #{$class-type}#{$namespace}three-tenths      { width:30%; }
    #{$class-type}#{$namespace}four-tenths       { @extend #{$class-type}#{$namespace}two-fifths; }
    #{$class-type}#{$namespace}five-tenths       { @extend #{$class-type}#{$namespace}one-half; }
    #{$class-type}#{$namespace}six-tenths        { @extend #{$class-type}#{$namespace}three-fifths; }
    #{$class-type}#{$namespace}seven-tenths      { width:70%; }
    #{$class-type}#{$namespace}eight-tenths      { @extend #{$class-type}#{$namespace}four-fifths; }
    #{$class-type}#{$namespace}nine-tenths       { width:90%; }


    /**
     * Twelfths
     */
    #{$class-type}#{$namespace}one-twelfth       { width:8.333%; }
    #{$class-type}#{$namespace}two-twelfths      { @extend #{$class-type}#{$namespace}one-sixth; }
    #{$class-type}#{$namespace}three-twelfths    { @extend #{$class-type}#{$namespace}one-quarter; }
    #{$class-type}#{$namespace}four-twelfths     { @extend #{$class-type}#{$namespace}one-third; }
    #{$class-type}#{$namespace}five-twelfths     { width:41.666% }
    #{$class-type}#{$namespace}six-twelfths      { @extend #{$class-type}#{$namespace}one-half; }
    #{$class-type}#{$namespace}seven-twelfths    { width:58.333%; }
    #{$class-type}#{$namespace}eight-twelfths    { @extend #{$class-type}#{$namespace}two-thirds; }
    #{$class-type}#{$namespace}nine-twelfths     { @extend #{$class-type}#{$namespace}three-quarters; }
    #{$class-type}#{$namespace}ten-twelfths      { @extend #{$class-type}#{$namespace}five-sixths; }
    #{$class-type}#{$namespace}eleven-twelfths   { width:91.666%; }


}


/**
 * Our regular, non-responsive width classes.
 */
@include device-type();

/**
* Our regular grid gutter spacing
*/
@include spacing-type();


/**
 * Our responsive classes, if we have enabled them.
 */
@if $responsive == true{

    @each $name in $breakpoint-has-widths {
        @include media-query($name) {
            @include device-type('#{$name}--');
        }
    }

    @each $gutter-namespace in $allowed-gutter-namespaces {
        @include spacing-type('', $gutter-namespace);
    }

    @each $name in $breakpoint-has-widths {
        @each $gutter-namespace in $allowed-gutter-namespaces {
            @include media-query($name) {
                @include spacing-type('#{$name}--', $gutter-namespace);
            }
        }
    }

}


/*------------------------------------*\
    $PUSH
\*------------------------------------*/
/**
 * Push classes, to move grid items over to the right by certain amounts.
 */
@mixin push-setup($namespace: ""){

    /**
     * Whole
     */
    #{$class-type}push--#{$namespace}one-whole           { left:100%; @include silent-relative(); }


    /**
     * Halves
     */
    #{$class-type}push--#{$namespace}one-half            { left:50%; @include silent-relative(); }


    /**
     * Thirds
     */
    #{$class-type}push--#{$namespace}one-third           { left:33.333%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}two-thirds          { left:66.666%; @include silent-relative(); }


    /**
     * Quarters
     */
    #{$class-type}push--#{$namespace}one-quarter         { left:25%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}two-quarters        { @extend #{$class-type}push--#{$namespace}one-half; }
    #{$class-type}push--#{$namespace}three-quarters      { left:75%; @include silent-relative(); }


    /**
     * Fifths
     */
    #{$class-type}push--#{$namespace}one-fifth           { left:20%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}two-fifths          { left:40%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}three-fifths        { left:60%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}four-fifths         { left:80%; @include silent-relative(); }


    /**
     * Sixths
     */
    #{$class-type}push--#{$namespace}one-sixth           { left:16.666%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}two-sixths          { @extend #{$class-type}push--#{$namespace}one-third; }
    #{$class-type}push--#{$namespace}three-sixths        { @extend #{$class-type}push--#{$namespace}one-half; }
    #{$class-type}push--#{$namespace}four-sixths         { @extend #{$class-type}push--#{$namespace}two-thirds; }
    #{$class-type}push--#{$namespace}five-sixths         { left:83.333%; @include silent-relative(); }


    /**
     * Eighths
     */
    #{$class-type}push--#{$namespace}one-eighth          { left:12.5%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}two-eighths         { @extend #{$class-type}push--#{$namespace}one-quarter; }
    #{$class-type}push--#{$namespace}three-eighths       { left:37.5%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}four-eighths        { @extend #{$class-type}push--#{$namespace}one-half; }
    #{$class-type}push--#{$namespace}five-eighths        { left:62.5%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}six-eighths         { @extend #{$class-type}push--#{$namespace}three-quarters; }
    #{$class-type}push--#{$namespace}seven-eighths       { left:87.5%; @include silent-relative(); }


    /**
     * Tenths
     */
    #{$class-type}push--#{$namespace}one-tenth           { left:10%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}two-tenths          { @extend #{$class-type}push--#{$namespace}one-fifth; }
    #{$class-type}push--#{$namespace}three-tenths        { left:30%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}four-tenths         { @extend #{$class-type}push--#{$namespace}two-fifths; }
    #{$class-type}push--#{$namespace}five-tenths         { @extend #{$class-type}push--#{$namespace}one-half; }
    #{$class-type}push--#{$namespace}six-tenths          { @extend #{$class-type}push--#{$namespace}three-fifths; }
    #{$class-type}push--#{$namespace}seven-tenths        { left:70%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}eight-tenths        { @extend #{$class-type}push--#{$namespace}four-fifths; }
    #{$class-type}push--#{$namespace}nine-tenths         { left:90%; @include silent-relative(); }


    /**
     * Twelfths
     */
    #{$class-type}push--#{$namespace}one-twelfth         { left:8.333%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}two-twelfths        { @extend #{$class-type}push--#{$namespace}one-sixth; }
    #{$class-type}push--#{$namespace}three-twelfths      { @extend #{$class-type}push--#{$namespace}one-quarter; }
    #{$class-type}push--#{$namespace}four-twelfths       { @extend #{$class-type}push--#{$namespace}one-third; }
    #{$class-type}push--#{$namespace}five-twelfths       { left:41.666%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}six-twelfths        { @extend #{$class-type}push--#{$namespace}one-half; }
    #{$class-type}push--#{$namespace}seven-twelfths      { left:58.333%; @include silent-relative(); }
    #{$class-type}push--#{$namespace}eight-twelfths      { @extend #{$class-type}push--#{$namespace}two-thirds; }
    #{$class-type}push--#{$namespace}nine-twelfths       { @extend #{$class-type}push--#{$namespace}three-quarters; }
    #{$class-type}push--#{$namespace}ten-twelfths        { @extend #{$class-type}push--#{$namespace}five-sixths; }
    #{$class-type}push--#{$namespace}eleven-twelfths     { left:91.666%; @include silent-relative(); }
}

@if $push == true {

    /**
     * Not a particularly great selector, but the DRYest way to do things.
     */
    [class*="push--"]{ position:relative; }


    @include push-setup();


    @if $responsive == true {
        @each $name in $breakpoint-has-push {
            @include media-query($name) {
                @include push-setup('#{$name}--');
            }
        }
    }
}

/*------------------------------------*\
    $PULL
\*------------------------------------*/
/**
 * Pull classes, to move grid items back to the left by certain amounts.
 */
@mixin pull-setup($namespace: ""){

    /**
     * Whole
     */
    #{$class-type}pull--#{$namespace}one-whole           { right:100%; @include silent-relative(); }


    /**
     * Halves
     */
    #{$class-type}pull--#{$namespace}one-half            { right:50%; @include silent-relative(); }


    /**
     * Thirds
     */
    #{$class-type}pull--#{$namespace}one-third           { right:33.333%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}two-thirds          { right:66.666%; @include silent-relative(); }


    /**
     * Quarters
     */
    #{$class-type}pull--#{$namespace}one-quarter         { right:25%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}two-quarters        { @extend #{$class-type}pull--#{$namespace}one-half; }
    #{$class-type}pull--#{$namespace}three-quarters      { right:75%; @include silent-relative(); }


    /**
     * Fifths
     */
    #{$class-type}pull--#{$namespace}one-fifth           { right:20%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}two-fifths          { right:40%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}three-fifths        { right:60%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}four-fifths         { right:80%; @include silent-relative(); }


    /**
     * Sixths
     */
    #{$class-type}pull--#{$namespace}one-sixth           { right:16.666%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}two-sixths          { @extend #{$class-type}pull--#{$namespace}one-third; }
    #{$class-type}pull--#{$namespace}three-sixths        { @extend #{$class-type}pull--#{$namespace}one-half; }
    #{$class-type}pull--#{$namespace}four-sixths         { @extend #{$class-type}pull--#{$namespace}two-thirds; }
    #{$class-type}pull--#{$namespace}five-sixths         { right:83.333%; @include silent-relative(); }


    /**
     * Eighths
     */
    #{$class-type}pull--#{$namespace}one-eighth          { right:12.5%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}two-eighths         { @extend #{$class-type}pull--#{$namespace}one-quarter; }
    #{$class-type}pull--#{$namespace}three-eighths       { right:37.5%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}four-eighths        { @extend #{$class-type}pull--#{$namespace}one-half; }
    #{$class-type}pull--#{$namespace}five-eighths        { right:62.5%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}six-eighths         { @extend #{$class-type}pull--#{$namespace}three-quarters; }
    #{$class-type}pull--#{$namespace}seven-eighths       { right:87.5%; @include silent-relative(); }


    /**
     * Tenths
     */
    #{$class-type}pull--#{$namespace}one-tenth           { right:10%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}two-tenths          { @extend #{$class-type}pull--#{$namespace}one-fifth; }
    #{$class-type}pull--#{$namespace}three-tenths        { right:30%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}four-tenths         { @extend #{$class-type}pull--#{$namespace}two-fifths; }
    #{$class-type}pull--#{$namespace}five-tenths         { @extend #{$class-type}pull--#{$namespace}one-half; }
    #{$class-type}pull--#{$namespace}six-tenths          { @extend #{$class-type}pull--#{$namespace}three-fifths; }
    #{$class-type}pull--#{$namespace}seven-tenths        { right:70%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}eight-tenths        { @extend #{$class-type}pull--#{$namespace}four-fifths; }
    #{$class-type}pull--#{$namespace}nine-tenths         { right:90%; @include silent-relative(); }


    /**
     * Twelfths
     */
    #{$class-type}pull--#{$namespace}one-twelfth         { right:8.333%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}two-twelfths        { @extend #{$class-type}pull--#{$namespace}one-sixth; }
    #{$class-type}pull--#{$namespace}three-twelfths      { @extend #{$class-type}pull--#{$namespace}one-quarter; }
    #{$class-type}pull--#{$namespace}four-twelfths       { @extend #{$class-type}pull--#{$namespace}one-third; }
    #{$class-type}pull--#{$namespace}five-twelfths       { right:41.666%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}six-twelfths        { @extend #{$class-type}pull--#{$namespace}one-half; }
    #{$class-type}pull--#{$namespace}seven-twelfths      { right:58.333%; @include silent-relative(); }
    #{$class-type}pull--#{$namespace}eight-twelfths      { @extend #{$class-type}pull--#{$namespace}two-thirds; }
    #{$class-type}pull--#{$namespace}nine-twelfths       { @extend #{$class-type}pull--#{$namespace}three-quarters; }
    #{$class-type}pull--#{$namespace}ten-twelfths        { @extend #{$class-type}pull--#{$namespace}five-sixths; }
    #{$class-type}pull--#{$namespace}eleven-twelfths     { right:91.666%; @include silent-relative(); }
}

@if $pull == true {

    /**
     * Not a particularly great selector, but the DRYest way to do things.
     */
    [class*="pull--"]{ position:relative; }


    @include pull-setup();


    @if $responsive == true {
        @each $name in $breakpoint-has-pull {
            @include media-query($name) {
                @include pull-setup('#{$name}--');
            }
        }
    }


}
